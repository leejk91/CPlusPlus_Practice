#ifndef __SETTINGS_H__
#define __SETTINGS_H__


#include <QTime>
#include <QDebug>
#include <QSettings>

/* 디버깅 메시지 출력에 사용하는 현재시간 매크로 */
#define CURRENT_DATETIME \
    qPrintable(QDateTime::currentDateTime().toString(Settings::LOG_DATETIME_FORMAT))

/**
 * @brief 시스템 전역설정
 */
class Settings
{
public:
    enum EquipmentMode {
        SERVICE_MODE =  0,          /* 서비스모드 */
        REPASS_BLOCK_MODE = 10,     /* 재승하차불가 검사 */
        REENTRY_CHECK_MODE = 11,    /* 재승차 검사 */
        TIMEOUT_CHECK_MODE = 12,    /* 탑승시간초과 검사 */
        TEST_CARD_MODE = 13,        /* 시험카드 사용 */
        DOCKING_MODE = 15,          /* 거치모드 */
    };

    enum EquipmentState {
        RTC_ERROR = 0,              /* 0:RTC 오류 - RTC 조회 값 이상 */
        LCD_ERROR,                  /* 1:LCD 오류 - 백라이트 초기화 실패 */
        KEY_ERROR,                  /* 2:KEY 오류 - GPIO 이벤트 감시 실패 */
        BUZZER_ERROR,               /* 3:부저 오류 - 오픈 실패 */
        SOUND_ERROR,                /* 4:사운드 오류 - 볼륨조절 또는 사운드재생 실패 */
        PRINTER_ERROR,              /* 5:프린터 오류 - 오픈/발열/인쇄 오류 */
        SDCARD_ERROR,               /* 6:SD카드 오류 - 미장착 또는 접근실패 */
        BATTERY_ERROR,              /* 7:배터리 오류 - 충전불가 */

        FP_SAM1 = 8,                /* 8:요금처리부 SAM #1 - PSAM 존재여부 */
        FP_SAM2,                    /* 9:요금처리부 SAM #2 - EBSAM 존재여부 */
        FP_SAM3,                    /* 10:요금처리부 SAM #3 - CSAM 존재여부 */
        FP_SAM4,                    /* 11:요금처리부 SAM #4 */
        FP_SAM5,                    /* 12:요금처리부 SAM #5 */
        FP_SAM6,                    /* 13:요금처리부 SAM #6 */
        FP_SAM7,                    /* 14:요금처리부 SAM #7 */
        FP_SAM8,                    /* 15:요금처리부 SAM #8 */

        CPU_OVERHEAT,               /* 16:CPU 과열 */
        PRINT_OVERHEAT,             /* 17:프린터 과열 */
        STORAGE_POOR,               /* 18:저장장치 공간부족 */
        BATTERY_LOW,                /* 19:배터리 잔량부족 */
        PRINTER_NO_PAPER,           /* 20:프린터 용지없음 */
        NO_BASIC_INFO,              /* 21:기초정보 미수신 */
        FP_CONNECT_ERROR,           /* 22:요금처리부 - 접속오류 */
        FP_AUTH_EXPIRED,            /* 23:요금처리부 - 인증만료 */
        FP_RTC_ERROR,               /* 24:요금처리부 - 11000:RTC 오류 */
        FP_RF_ERROR,                /* 25:요금처리부 - 11001:RF 오류 */
        FP_BASIC_FARE_ERROR,        /* 26:요금처리부 - 12001:기본요금(M2002) 이상 */
        FP_BASIC_INFO_ERROR,        /* 27:요금처리부 - 12002:기초정보 이상 */
        FP_DISTANCE_FARE_ERROR,     /* 28:요금처리부 - 12003:역간운임(M2007) 이상 */
        FP_BL_ERROR,                /* 29:요금처리부 - 12004:B/L(M2101/M2118) 이상 */
        FP_NO_ESSENTIAL_INFO,       /* 30:요금처리부 - 필수 운영정보 없음 */
        FP_UNKOWN_ERROR             /* 31:요금처리부 - 알 수 없는 오류 */
    };

    enum USERMode {
        NORMAL_MODE =  0,           /* 일반모드 */
        MANAGER_MODE,               /* 관리자모드 */
        DEV_MODE,                   /* 개발자모드 */
    };

    constexpr static const char * const LOG_DATETIME_FORMAT = "[yyyy-MM-dd hh:mm:ss.zzz] ";

private:
    constexpr static const char * const APP_ID = "A2242";
    constexpr static const char * const APP_VERSION = "20180401101010";
    constexpr static const char * const CERT_NO = "ST010PR01008";

    constexpr static const char * const BIZ_NO = "698-87-00598";
    constexpr static const char * const BIZ_TYPE = "운송|부동산";
    constexpr static const char * const BIZ_KIND = "여객운송|임대";
    constexpr static const char * const BIZ_ADDRESS = "서울특별시 성동구 천호대로 346";
    constexpr static const char * const BIZ_PHONE_NO = "02-1234-5678";
    constexpr static const char * const BIZ_REPRESENTATIVE = "서울교통공사 사장";

    static const quint8 EQUIPMENT_TYPE = 0x03;

    static const int MIN_VOLUME_LEVEL = 0;
    static const int MAX_VOLUME_LEVEL = 31;
    static const int MIN_BACKLIGHT_LEVEL = 1;
    static const int MAX_BACKLIGHT_LEVEL = 10;

    static const int DEFAULT_EQUIPMENT_MODE = 0x1801;

    static const int DEFAULT_ALERT_TEMPERATURE = 80;
    static const int DEFAULT_SHUTDOWN_TEMPERATURE = 100;

private:
    constexpr static const char * const ORGANIZATION = "SeoulMetro";

    constexpr static const char * const STATION_NO = "StationNo";
    constexpr static const char * const EQUIPMENT_NO = "EquipmentNo";

    constexpr static const char * const ADDRESS = "Address";
    constexpr static const char * const NETMASK = "Netmask";
    constexpr static const char * const GATEWAY = "Gateway";
    constexpr static const char * const SERVER_ADDRESS = "ServerAddress";
    constexpr static const char * const SERVER_PORT = "ServerPort";

    constexpr static const char * const EQUIPMENT_MODE = "EquipmentMode";
    constexpr static const char * const EQUIPMENT_STATE = "EquipmentState";

    constexpr static const char * const ALERT_TEMPERATURE = "AlertTemperature";
    constexpr static const char * const SHUTDOWN_TEMPERATURE = "ShutdownTemperature";

    constexpr static const char * const VOLUME_LEVEL = "VolumeLevel";
    constexpr static const char * const BACKLIGHT_LEVEL = "BacklightLevel";

    constexpr static const char * const SAVING_TIME = "SavingTime";
    constexpr static const char * const SUSPEND_TIME = "SuspendTime";

    constexpr static const char * const HAS_UPDATE = "HasUpdate";
    constexpr static const char * const UPDATE_FILE_NAME = "UpdateFileName";
    constexpr static const char * const APP_VERSION_NAME = "AppVersionName";
    constexpr static const char * const SEARCH_FILE_VERSION = "SearchFileVersion";
    constexpr static const char * const LAST_SYNC_DATE = "TransactionSyncDate";
    constexpr static const char * const DAILY_CLOSING_DATE = "DoDailyClosingDate";

    constexpr static const char * const BEFORE_TRADE_AMOUNT = "Before_Trade_Amount";
    constexpr static const char * const BEFORE_TRADE_REASON = "Before_Trade_Reason";
    constexpr static const char * const BEFORE_TRADE_CARDNUM = "Before_Trade_CardNum";
    constexpr static const char * const BEFORE_TRADE_DAY = "Before_Trade_Day";
    constexpr static const char * const BEFORE_TRADE_TIME = "Before_Trade_Time";
    constexpr static const char * const BEFORE_TRADE_STATION = "Before_Trade_Station";
    constexpr static const char * const BEFORE_TRADE_STATION_SIZE = "Before_Trade_Station_Size";
    constexpr static const char * const BEFORE_TRADE_CARD_TYPE = "Before_Trade_Card_Type";

    constexpr static const char * const PSG_FEE_NUMBER = "Psg_Fee_Number";

    constexpr static const char * const USER_NAME = "User_Name";

    constexpr static const char * const RF_CONF_ALL_CW = "RfConfCWConduct";
    constexpr static const char * const RF_CONF_A_RX_THR = "RfConfARxThreas";
    constexpr static const char * const RF_CONF_A_MOD_CON = "RfConfAModCon";
    constexpr static const char * const RF_CONF_B_MOD_CON = "RfConfBModCon";
    constexpr static const char * const RF_CONF_B_RX_THR = "RfConfBRxThres";

public:
    /* 어플리케이션 파일연계ID */
    static inline const QString appId() { return APP_ID; }
    /* 어플리케이션 버전 */
    static inline const QString appVersion() { return APP_VERSION; }
    /* 장비인증번호 */
    static inline const QString certNo() { return CERT_NO; }

    /* 사업자등록번호 */
    static inline const QString businessNumber() { return BIZ_NO; }
    /* 업태 */
    static inline const QString businessCondition() { return BIZ_TYPE; }
    /* 종목 */
    static inline const QString businessEvent() { return BIZ_KIND; }
    /* 본사 */
    static inline const QString companyAddress() { return BIZ_ADDRESS; }
    /* 전화번호 */
    static inline const QString companyPhoneNumber() { return BIZ_PHONE_NO; }
    /* 성명 */
    static inline const QString companyBossName() { return BIZ_REPRESENTATIVE; }

    /* 외부역번호 */
    static inline quint16 stationNo() { return value(STATION_NO).toUInt(); }
    static inline void setStationNo(quint16 no) { setValue(STATION_NO, no); }
    /* 장비번호 */
    static inline quint8 equipmentNo() { return value(EQUIPMENT_NO).toUInt(); }
    static inline void setEquipmentNo(quint8 no) { setValue(EQUIPMENT_NO, no); }

    /* 교통기관코드 */
    static inline quint8 orgNo() { return _orgNo; }
    static inline void setOrgNo(quint8 no) { _orgNo = no; }
    /* 교통수단코드 */
    static inline quint16 meansCode() { return _meansCode; }
    static inline void setMeansCode(quint16 code) { _meansCode = code; }
    /* 한글역명 */
    static inline QString stationName() { return _stationName; }
    static inline void setStationName(const QString &name) { _stationName = name; }
    /* 조작운영부ID */
    static inline QString equipmentId() { return _equipmentId; }
    static inline void setEquipmentId(const QString &id) { _equipmentId = id; }
    /* 운영시작시간 */
    static inline QTime startTime() { return _startTime; }
    static inline void setStartTime(const QTime &time) { _startTime = time; }
    /* 운영종료시간 */
    static inline QTime endTime() { return _endTime; }
    static inline void setEndTime(const QTime &time) { _endTime = time; }

    /* 장비구분코드 */
    static inline quint8 equipmentType() { return EQUIPMENT_TYPE; }
    /* 장비모드 */
    static inline quint32 equipmentMode()
    {
        return (value(EQUIPMENT_MODE, DEFAULT_EQUIPMENT_MODE).toUInt() & 0x7FFFU)
                | (_dockingMode ? (1U << 15) : 0)
            ;
    }
    static inline bool equipmentMode(EquipmentMode i)
    {
        if (i == DOCKING_MODE) return _dockingMode;

        return equipmentMode() & (1U << i);
    }
    static inline void setEquipmentMode(EquipmentMode i, bool mode = true)
    {
        if (i == DOCKING_MODE)
        {
            _dockingMode = mode;

            return;
        }

        quint32 _equipmentMode = equipmentMode();

        qDebug() << "장비모드[" << i << "] = [" << mode << "]";
        setValue(
                  EQUIPMENT_MODE
                , mode ? (_equipmentMode | (1U << i)) : (_equipmentMode & ~(1U << i))
            );
    }
    /* 장비상태 */
    static inline quint32 equipmentState() { return value(EQUIPMENT_STATE).toUInt(); }
    static inline bool equipmentState(EquipmentState i) { return equipmentState() & (1U << i); }
    static inline void setEquipmentState(EquipmentState i, bool state = true)
    {
        quint32 _equipmentState = equipmentState();

        qDebug() << "장비상태[" << i << "] = [" << state << "]";

        setValue(
                  EQUIPMENT_STATE
                , state ? (_equipmentState | (1U << i)) : (_equipmentState & ~(1U << i))
            );
    }
    /* 운영상태(운영시작 결과코드) */
    static inline quint8 operationStatus() { return _operationStatus; }
    static inline void setOperationStatus(quint8 status) { _operationStatus = status; }

    /* IP주소 */
    static inline QString address() { return value(ADDRESS).toString(); }
    static inline void setAddress(const QString &address) { setValue(ADDRESS, address); }
    /* NETMASK */
    static inline QString netmask() { return value(NETMASK).toString(); }
    static inline void setNetmask(const QString &netmask) { setValue(NETMASK, netmask); }
    /* GATEWAY */
    static inline QString gateway() { return value(GATEWAY).toString(); }
    static inline void setGateway(const QString &gateway) { setValue(GATEWAY, gateway); }
    /* 서버IP주소 */
    static inline QString serverAddress() { return value(SERVER_ADDRESS).toString(); }
    static inline void setServerAddress(const QString &address)
    {
        setValue(SERVER_ADDRESS, address);
    }
    /* 서버포트 - default:45056 */
    static inline quint16 serverPort() { return value(SERVER_PORT).toUInt(); }
    static inline void setServerPort(quint16 port) { setValue(SERVER_PORT, port); }
#if 0
    /* 서비스 모드 */
    static inline bool serviceMode() { return equipmentMode(SERVICE_MODE); }
    static inline void setServiceMode(bool mode) { setEquipmentMode(SERVICE_MODE, mode); }
    /* 재승하차 허용여부 */
    static inline quint8 repassBlockMode() { return equipmentMode(REPASS_BLOCK_MODE) ? 1 : 0; }
    static inline void setRepassBlockMode(quint8 mode)
    {
        setEquipmentMode(REPASS_BLOCK_MODE, mode != 0);
    }
    /* 재승차 검사여부 */
    static inline quint8 reentryCheckMode() { return equipmentMode(REENTRY_CHECK_MODE) ? 1 : 0; }
    static inline void setReentryCheckMode(quint8 mode)
    {
        setEquipmentMode(REENTRY_CHECK_MODE, mode != 0);
    }
    /* 시간초과 검사여부 */
    static inline quint8 timeoutCheckMode() { return equipmentMode(TIMEOUT_CHECK_MODE) ? 1 : 0; }
    static inline void setTimeoutCheckMode(quint8 mode)
    {
        setEquipmentMode(TIMEOUT_CHECK_MODE, mode != 0);
    }
    /* 시험카드 사용여부 */
    static inline quint8 testCardMode() { return equipmentMode(TEST_CARD_MODE) ? 1: 0; }
    static inline void setTestCardMode(quint8 mode)
    {
        setEquipmentMode(TEST_CARD_MODE, mode != 0);
    }
    /* 거치모드 */
    static inline bool dockingMode() { return _dockingMode; }
    static inline void setDockingMode(bool mode) { _dockingMode = mode; }
#endif
    /* 경보온도 */
    static inline int alertTemperature()
    {
        return value(ALERT_TEMPERATURE, DEFAULT_ALERT_TEMPERATURE).toInt();
    }
    static inline void setAlertTemperature(int degree) { setValue(ALERT_TEMPERATURE, degree); }
    /* 종료온도 */
    static inline int shutdownTemperature()
    {
        return value(SHUTDOWN_TEMPERATURE, DEFAULT_SHUTDOWN_TEMPERATURE).toInt();
    }
    static inline void setShutdownTemperature(int degree)
    {
        setValue(SHUTDOWN_TEMPERATURE, degree);
    }

    /* 음량수준:0 ~ 31 */
    static inline int volumeLevel() { return value(VOLUME_LEVEL, MAX_VOLUME_LEVEL).toUInt(); }
    static inline void setVolumeLevel(int level)
    {
        setValue(
                  VOLUME_LEVEL
                , (
                          (level < MIN_VOLUME_LEVEL) ? MIN_VOLUME_LEVEL
                        : (level > MAX_VOLUME_LEVEL) ? MAX_VOLUME_LEVEL
                        : level
                    )
            );
    }
    /* LCD 백라이트 밝기수준:1 ~ 10 */
    static inline int backlightLevel()
    {
        return value(BACKLIGHT_LEVEL, MAX_BACKLIGHT_LEVEL).toUInt();
    }
    static inline void setBacklightLevel(int level)
    {
        setValue(
                  BACKLIGHT_LEVEL
                , (
                          (level < MIN_BACKLIGHT_LEVEL) ? MIN_BACKLIGHT_LEVEL
                        : (level > MAX_BACKLIGHT_LEVEL) ? MAX_BACKLIGHT_LEVEL
                        : level
                    )
            );
    }
    /* 절전모드 시간설정 (분단위) */
    static inline int savingMode() {return value(SAVING_TIME).toInt();}
    static inline void setSavingMode(const QString &savetime) { setValue(SAVING_TIME, savetime);}
    /* 중지모드 시간설정 (초단위) */
    static inline int suspendMode() {return value(SUSPEND_TIME).toInt();}
    static inline void setSuspendMode(const QString &suspendtime)
    {
        setValue(SUSPEND_TIME, suspendtime);
    }

    /* 어플리케이션 업데이트 여부 */
    static inline bool hasUpdate() { return value(HAS_UPDATE).toBool(); }
    static inline void setHasUpdate(bool has) { setValue(HAS_UPDATE, has); }
    /* 어플리케이션 업데이트 파일 */
    static inline QString updateFileName() { return value(UPDATE_FILE_NAME).toString(); }
    static inline void setUpdateFileName(const QString &fileName)
    {
        setValue(UPDATE_FILE_NAME, fileName);
    }
    /*  */
    static inline QString appVersionName() { return value(APP_VERSION_NAME).toString(); }
    static inline void setappVersionName(const QString &verName)
    {
        setValue(APP_VERSION_NAME, verName);
    }
    /* 검색 파일 버전 */
    static inline QString searchFileVersion() { return value(SEARCH_FILE_VERSION).toString(); }
    static inline void setSearchFileVersion(const QString &version)
    {
        setValue(SEARCH_FILE_VERSION, version);
    }
    /* 최종 동기화 일자 - 기본값은 2일전 */
    static inline QDate lastSyncDate()
    {
        return value(LAST_SYNC_DATE, QDate::currentDate().addDays(-2)).toDate();
    }
    static inline void setLastSyncDate(const QDate &date) { setValue(LAST_SYNC_DATE, date); }
    /* 최근 일마감 일자 - 기본값은 NULL */
    static inline QDate dailyClosingDate() { return value(DAILY_CLOSING_DATE).toDate(); }
    static inline void setDailyClosingDate(const QDate &date) { setValue(DAILY_CLOSING_DATE, date); }

#if 0
    /* 마지막 거래유형 */
    static inline Transaction::TransactionType lastTransType()
    {
        return Transaction::TransactionType(value(LAST_TRANS_TYPE).toUInt());
    }
    static inline void setLastTransType(Transaction::TransactionType type)
    {
        setValue(LAST_TRANS_TYPE, type);
    }
    /* 마지막 거래번호 */
    static inline quint32 lastTransNo() { return value(LAST_TRANS_NO).toUInt(); }
    static inline void setLastTransNo(quint32 no) { setValue(LAST_TRANS_NO, no); }
#endif
    /* 직전 거래 정보 */
    static inline QString tradeAmount(){ return value(BEFORE_TRADE_AMOUNT).toString(); }
    static inline void setTradeAmount(const QString &amount){ setValue(BEFORE_TRADE_AMOUNT, amount); }

    static inline quint8 tradeType(){ return value(BEFORE_TRADE_REASON).toUInt(); }
    static inline void setTradeType( quint8 processtype ){ setValue(BEFORE_TRADE_REASON, processtype); }

    static inline QString tradeCardNum(){ return value(BEFORE_TRADE_CARDNUM).toString(); }
    static inline void setTradeCardNum(const QString &CardNumber){ setValue(BEFORE_TRADE_CARDNUM, CardNumber); }

    static inline QString tradeDay(){ return value(BEFORE_TRADE_DAY).toString(); }
    static inline void setTradeDay(const QString &TradeDay){ setValue(BEFORE_TRADE_DAY, TradeDay); }

    static inline QString tradeTime(){ return value(BEFORE_TRADE_TIME).toString(); }
    static inline void setTradeTime(const QString &TradeTime){ setValue(BEFORE_TRADE_TIME, TradeTime); }

    static inline QString tradeStation(){ return value(BEFORE_TRADE_STATION).toString(); }
    static inline void setTradeStation(const QString &TradeStation){ setValue(BEFORE_TRADE_STATION, TradeStation); }

    static inline qint32 tradeStationSize(){ return value(BEFORE_TRADE_STATION_SIZE).toInt(); }
    static inline void setTradeStationSize(qint32 TradeStationSize){ setValue(BEFORE_TRADE_STATION_SIZE, TradeStationSize); }

    static inline quint8 tradeCardType(){ return value(BEFORE_TRADE_CARD_TYPE).toUInt(); }
    static inline void setTradeCardType( quint8 cardtype ){ setValue(BEFORE_TRADE_CARD_TYPE, cardtype); }

    /* 여객운임영수증 Count */
    static inline quint32 psgNum() { if(value(PSG_FEE_NUMBER).toInt() == 0){return _psgCount;} return value(PSG_FEE_NUMBER).toInt(); }
    static inline void setPsgNum(quint32 count) { setValue(PSG_FEE_NUMBER, count); }

    /* 사용자 권한 */
    static inline quint8 userMode() { return _userMode; }
    static inline void setUserMode(quint8 status) { _userMode = status; }

    /* USB Memory Exist */
    static inline bool usbMemoryExist() { return _usbMemExist; }
    static inline void setusbMemoryExist(bool status) { _usbMemExist = status; }

    /* PRINTER OPEN */
    static inline bool printerOpened() { return _printerOpened; }
    static inline void setprinterOpened(bool status) { _printerOpened = status; }

    /* PRINTER NOPaper */
    static inline bool printerNoPaper() { return _printerNoPaper; }
    static inline void setprinterNoPaper(bool status) { _printerNoPaper = status; }

    /* 취급자 */
    static inline QString userName() { return value(USER_NAME).toString(); }
    static inline void setUserName(const QString &name) { setValue(USER_NAME, name); }

    /* RF_Reg */
    // 해당 Data(*.conf)가 없는 경우 0으로 Return되고 있음. 차후 생각해야 할 부분
    static inline quint8 RfConfCWConduct() { return value(RF_CONF_ALL_CW).toUInt(); }
    static inline void setRfConfCWConduct(quint8 no) { setValue(RF_CONF_ALL_CW, no); }
    static inline quint8 RfConfARxThreas() { return value(RF_CONF_A_RX_THR).toUInt(); }
    static inline void setRfConfARxThreas(quint8 no) { setValue(RF_CONF_A_RX_THR, no); }
    static inline quint8 RfConfAModCon() { return value(RF_CONF_A_MOD_CON).toUInt(); }
    static inline void setRfConfAModCon(quint8 no) { setValue(RF_CONF_A_MOD_CON, no); }
    static inline quint8 RfConfBModCon() { return value(RF_CONF_B_MOD_CON).toUInt(); }
    static inline void setRfConfBModCon(quint8 no) { setValue(RF_CONF_B_MOD_CON, no); }
    static inline quint8 RfConfBRxThres() { return value(RF_CONF_B_RX_THR).toUInt(); }
    static inline void setRfConfBRxThres(quint8 no) { setValue(RF_CONF_B_RX_THR, no); }
private:
    Settings() {}

public:
    static inline QVariant value(QString key, const QVariant &defaultValue = QVariant())
    {
        return QSettings(ORGANIZATION).value(key, defaultValue);
    }
    static inline void setValue(QString key, QVariant value)
    {
        QSettings(ORGANIZATION).setValue(key, value);
    }

private:
    static quint8 _orgNo;
    static quint16 _meansCode;
    static QString _stationName;
    static QString _equipmentId;
    static QTime _startTime;
    static QTime _endTime;

    static bool _dockingMode;
    static quint8 _operationStatus;

    static quint32 _psgCount;
    static quint8 _userMode;
    static bool _usbMemExist;
    static bool _printerOpened;
    static bool _printerNoPaper;
};

#endif // __SETTINGS_H__
