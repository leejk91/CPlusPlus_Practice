/* ------------------------------------------------------------------------------------- */
//		PROJECT  :    DUKPT 보안 라이브러리
//		FILE     :    Auth_koces.h
//		AUTHOR   :    한국신용카드결제(주) - KOCES
// 		DATE     :    2017/04/19
// 		VERSION  :    v1.0.0.6
// 		CONTENTS :    사용자 InterFace와 정의를 제공한다. 
/* ------------------------------------------------------------------------------------- */
#ifndef __AUTH_KOCES_H__
#define __AUTH_KOCES_H__

#include "stdio.h"
#include "stdlib.h"
#include "string.h"

#define AP_KEY_SIZE 16		// - 160831 auth_proto.h에 존재
#define AP_TID_SIZE 7
#define AP_RAND_SIZE 16
#define AP_HIDE_DATA_SIZE 1024

/* ------------------------------------------------------------------------------------- */
//		Defines
/* ------------------------------------------------------------------------------------- */
/* Return Value */
#define KOCES_DUKPT_SUCCESS							000000	/* Success */
#define KOCES_DUKPT_ERR_HDATA_LEN					-900001 /* 유효하지 않은 HDATA 길이 오류 */
#define KOCES_DUKPT_ERR_SID_LRC						-900002 /* SID 의 LRC 결과 불일치 오류 */
#define KOCES_DUKPT_ERR_SN_LEN						-900003 /* 유효하지 않은 Serial Number 길이 오류 */
#define KOCES_DUKPT_ERR_INVALID_FUNC				-900004 /* 함수 포인트 미설정 오류 */
#define KOCES_DUKPT_ERR_SKEY_LRC					-900005 /* Skey 의 LRC 결과 불일치 오류 */
#define KOCES_DUKPT_ERR_AES_CRYPT					-900006 /* AES 암호화 오류 */
#define KOCES_DUKPT_ERR_AES_DECRYPT					-900007 /* AES 복호화 오류 */
#define KOCES_DUKPT_ERR_NULL						-900008 /* Null 포인트 값 오류 */
#define KOCES_DUKPT_ERR_LEN							-900009 /* 유효하지 않은 길이 오류 */
#define KOCES_DUKPT_ERR_TKEY_FAIL					-900010 /* 임시 Key 생성 실패 오류 */
#define KOCES_DUKPT_ERR_IMPORT_FKSET				-900011 /* Future Key Set Import 실패 오류 */
#define KOCES_DUKPT_ERR_MAKE_TOKENCS				-900012 /* TokenCS 생성 실패 오류 */
#define KOCES_DUKPT_ERR_VERIFY_TOKENSC				-900013 /* TokenSC 생성 실패 오류 */
#define KOCES_DUKPT_ERR_GENE_FKSET					-900014 /* Future Key Set 생성 실패 오류 */
#define KOCES_DUKPT_ERR_EXPORT_FKSET				-900015 /* Future Key Set Export 실패 오류 */
#define KOCES_DUKPT_ERR_DIFF_HASH					-900016 /* 비교 Hash 값들이 다름  */
#define KOCES_DUKPT_ERR_COMP_HASHLEN				-900017 /* 비교 Hash 값의 길이가 다름 */
#define KOCES_DUKPT_ERR_HASH						-900018 /* Hash 실패 오류 */
#define KOCES_DUKPT_ERR_TIME						-900019 /* Time 함수 실패 오류 */
#define KOCES_DUKPT_ERR_TOKENCS_LEN					-900020 /* TokenCS 길이 오류 */
#define KOCES_DUKPT_ERR_TOKENSC_LEN					-900021 /* TokenSC 길이 오류 */
#define KOCES_DUKPT_ERR_VERIFY_TIME					-900022 /* 시간 검증 실패 오류 */
#define KOCES_DUKPT_ERR_FUNCINIT					-900023 /* 함수 초기화가 완료되지 않은 오류 */
#define KOCES_DUKPT_ERR_MAKE_RNG					-900024 /* Random Number 생성 실패 오류 */
#define KOCES_DUKPT_ERR_MAKE_PIN					-900025 /* 거래키 생성 실패 오류 */
#define KOCES_DUKPT_ERR_DEC_IPEK					-900026 /* ipek 복호화 실패 오류 */
#define KOCES_DUKPT_ERR_ENC_IPEK					-900027 /* ipek 암호화 실패 오류 */

/* ------------------------------------------------------------------------------------- */
//		Typedef
/* ------------------------------------------------------------------------------------- */
/* Call-Back Functions */
typedef int (*P_PRINTF)(const char* msg, ...);								// Debug 용 함수 포인터
typedef int (*P_RANDOM)(unsigned char *OutData, int *OutLen);				// Random 값 생성 함수 포인터
typedef int (*P_TIME1)(unsigned char *outAddr, int *OutLen);				// time() -> ctime() 변환 함수 포인터
typedef int (*P_TIME2)(unsigned char *Input, unsigned int *OutSec);		// strptime() -> mktime() 변환 함수 포인터
typedef int (*P_TIME3)(unsigned int *OutSec);								// time() 함수 포인터

typedef struct __KOCES_FUNCPTR{
	P_PRINTF					pPrintf;
	P_RANDOM					pRandomGenerator;
	P_TIME1						pTime2Ctime;
	P_TIME2						pStrtime2Mktime;
	P_TIME3						pTime;
}KOCES_FUNCPTR;

/* Future Key Set */
typedef struct {
	unsigned char KSN[17];			// Key Serial Number
	unsigned char FKSet[21][45];	// Future Key Set
}KOCES_FKINFO;



/* ------------------------------------------------------------------------------------- */
//		API Functions
/* ------------------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

#if 1
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ----------------------------------------------------------------------------------------------------------------------------------------------- //
 
//                                                    난수 주입 API 함수

// ----------------------------------------------------------------------------------------------------------------------------------------------- //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
#endif

int KOCES_DUKPT_ReGen_Hide_Data(unsigned char *hide_data, int hide_data_len, unsigned char *serial_num, int serial_num_len);

#if 1
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ----------------------------------------------------------------------------------------------------------------------------------------------- //
 
//                                                    상호인증 API 함수

// ----------------------------------------------------------------------------------------------------------------------------------------------- //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
#endif

int KOCES_DUKPT_Make_TokenCS(const unsigned char *hide_data, int hide_data_len, const unsigned char *tid, int tid_len,
        unsigned char *key1, int key1_len, unsigned char *send_token_cs, int *send_token_cs_len);

int KOCES_DUKPT_Verify_TokenSC(const unsigned char *hide_data, int hide_data_len, const unsigned char *recv_token_sc, int recv_token_sc_len, 
	const unsigned char *ksn, int ksn_len, const unsigned char *key1, int key1_len, KOCES_FKINFO *fki);

int KOCES_DUKPT_Verify_TokenSC_Ipek(const unsigned char *hide_data, int hide_data_len, const unsigned char *recv_token_sc, int recv_token_sc_len, 
	const unsigned char *ksn, int ksn_len, const unsigned char *key1, int key1_len, unsigned char *enc_key, int *enc_key_len);

#if 1
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ----------------------------------------------------------------------------------------------------------------------------------------------- //
 
//                                                    암호화 API 함수

// ----------------------------------------------------------------------------------------------------------------------------------------------- //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
#endif

int KOCES_DUKPT_AES_Encrypt(const unsigned char *hide_data, int hide_data_len, unsigned char *enc, int *enc_len, unsigned char *KSN, int *KSN_len, const unsigned char *org, int org_len, KOCES_FKINFO *fki);

int KOCES_DUKPT_AES_Encrypt_EncKey(const unsigned char *hide_data, int hide_data_len, unsigned char *enc, int *enc_len, unsigned char *org, int org_len, unsigned char *enc_key, int enc_key_len);

int KOCES_DUKPT_AES_Decrypt_EncKey(const unsigned char *hide_data, int hide_data_len, unsigned char *org, int *org_len, unsigned char *enc, int enc_len, unsigned char *key, int key_len);

int KOCES_CRYPT_AES_Encrypt(unsigned char *out, int *out_len,
		const unsigned char *in, int in_len, const unsigned char *key, int key_len, int alg, int mode);

int KOCES_CRYPT_AES_Decrypt(unsigned char *out, int *out_len,
		const unsigned char *in, int in_len, const unsigned char *key, int key_len, int alg, int mode);

#if 1
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ----------------------------------------------------------------------------------------------------------------------------------------------- //
 
//                                                    무결성 점검 API 함수

// ----------------------------------------------------------------------------------------------------------------------------------------------- //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
#endif

int KOCES_DUKPT_Make_Self_Protect_HASH(const unsigned char *hide_data, int hide_data_len,
                                      unsigned char *out, int *out_len, const unsigned char *in, int in_len);

int KOCES_DUKPT_Comp_Self_Protect_HASH(const unsigned char *hide_data, int hide_data_len,
        const unsigned char *enc_hash, int enc_hash_len, const unsigned char *in_hash, int in_hash_len);

int KOCES_CRYPT_HASH_SHA256( const unsigned char *data, int data_len, unsigned char digest[32] );


#ifdef __INIT__
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ----------------------------------------------------------------------------------------------------------------------------------------------- //
 
//                                                    DUKPT 초기화 함수

// ----------------------------------------------------------------------------------------------------------------------------------------------- //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
#endif

/*******************************************************************************
* Function              : int KOCES_DUKPT_InitFunc(KOCES_FUNCPTR * stFunc, int Mode)
* Argument              : stFunc : 포인터 함수 구조체
*                         Mode : Linux 용 기본 모드 사용 혹은 사용자모드 사용 설정
*                         0 : 기본모드,    1 : 사용자모드
* Return                : return KOCES_DUKPT_SUCCESS
*                         return KOCES_DUKPT_ERR_INVALID_FUNC
* Description           : DUKPT 에서 사용되어질 함수를 지정하여 설정하는 함수
* Example               : KOCES_FUNCPTR stUserFunc;
*                         stUserFunc.pPrintf = printf
*******************************************************************************/
int KOCES_DUKPT_InitFunc(KOCES_FUNCPTR *stFunc, int Mode);

#if 1
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ----------------------------------------------------------------------------------------------------------------------------------------------- //
 
//                                                    DEBUG Functions

// ----------------------------------------------------------------------------------------------------------------------------------------------- //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
#endif

/*******************************************************************************
* Function              : void KOCES_DUKPT_SetDebug(int OnOff)
* Argument              : OnOff(input) - Debug Option을 설정
*                         0(default) : Clear Debug Option, 1 : Set Debug Option
* Return                : None
* Description           : OnOff의 값에 따라 Debug 메시지를 출력한다.
* Example               : int OnOff = 1;	// On
*                         KOCES_DUKPT_SetDebug(OnOff);
*******************************************************************************/
void KOCES_DUKPT_SetDebug(int OnOff);


#ifdef __UTIL__
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ----------------------------------------------------------------------------------------------------------------------------------------------- //
 
//                                                    Util Functions

// ----------------------------------------------------------------------------------------------------------------------------------------------- //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
// ############################################################################################################################################### //
#endif
int KOCES_DUKPT_HexToByte(unsigned char *out, int *outLen, char *str, int strLen);

int KOCES_DUKPT_Generate_RandNo(unsigned char *RandNo, int RandNo_len);



#ifdef __cplusplus
}
#endif


#endif
